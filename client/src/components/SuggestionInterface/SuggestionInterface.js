"use client"; 
import { useState } from 'react';

const SuggestionInterface = ({ documentId }) => {
  const [suggestions, setSuggestions] = useState([]);
  const [isLoaded, setIsLoaded] = useState(false); // Track if suggestions are loaded

  // Fetch suggestions from the API
  const fetchSuggestions = async () => {
    try {
      const response = await fetch(`http://127.0.0.1:5555/documents/${documentId}/suggestions`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('JWT')}`,
        },
      });

      if (!response.ok) {
        throw new Error('Failed to fetch suggestions');
      }

      const data = await response.json();
      setSuggestions(data.suggestions);
      setIsLoaded(true); // Mark that suggestions are loaded
    } catch (err) {
      console.error(err.message);
      // Handle error if necessary
    }
  };

  // Handle accept and reject actions
  const handleAccept = (id) => {
    console.log(`Accepted suggestion with id: ${id}`);
    // Handle accept logic here
  };

  const handleReject = (id) => {
    console.log(`Rejected suggestion with id: ${id}`);
    // Handle reject logic here
  };

  return (
    <>
      {/* Hero Section (optional, similar to Blog Hero) */}
      <div className="container">
        <div className="row align-items-center justify-content-start">
          <div className="col-lg-5">
            <h1 className="heading" data-aos="fade-up">Suggestions</h1>
            <p className="mb-5" data-aos="fade-up">Review and apply suggestions generated by the NLP model for document improvements.</p>
          </div>
        </div>
      </div>

      {/* Suggestions Section */}
      <div className="section">
        <div className="container">
          <div className="row mb-5">
            {suggestions.length > 0 && (
              suggestions.map((suggestion) => (
                <div className="col-lg-6" key={suggestion.id}>
                  <div className="suggestion-entry">
                    <p>{suggestion.suggestion_text}</p>
                    <div className="btn-group">
                      <button onClick={() => handleAccept(suggestion.id)} className="btn btn-sm btn-outline-success">Accept</button>
                      <button onClick={() => handleReject(suggestion.id)} className="btn btn-sm btn-outline-danger">Reject</button>
                    </div>
                  </div>
                </div>
              ))
            )}
          </div>

          {/* Load suggestions button */}
          {!isLoaded && (
            <div className="row">
              <div className="col-lg-12">
                <button onClick={fetchSuggestions} className="upload-button mt-44">Load Suggestions</button>
              </div>
            </div>
          )}
        </div>
      </div>
    </>
  );
};

export default SuggestionInterface;
